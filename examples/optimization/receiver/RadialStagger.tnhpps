var dataIn = new DataObject;
dataIn.read("in.csv");
dataIn = dataIn.array(0);
var hR = parseFloat(dataIn[0]); // receiver height
var rays = parseInt(dataIn[1]);


var degree = Math.PI/180;
var latitude = 0*degree;  // location
var declination = 23.4*degree; // obliquity

var heliostatW = 2.; // width
var heliostatH = 2.; // height
var heliostatD = Math.sqrt(heliostatW*heliostatW + heliostatH*heliostatH); // diameter
var heliostatZ = 1.5; // z-position

var receiverD = 2.;
var receiverH = hR;
var receiverZ = 20.;
var receiverR = receiverD/2.; // radius

var heliostats = 500; // number of heliostats (stops adding rings)
var rhoMin = 0.75*receiverZ; // exclusion radius around tower

var azDistance = 1.6; // azimuthal separation in heliostatD units (for a first ring in zone)
var azReset = 1.333; // reset condition (to start a new zone)


function makeHeliostat(parent, name, position, aiming, focus)
{
	var n = parent.createNode(name);
	n.setParameter("translation", position);

	var t = n.createTracker();
	var ta = t.getPart("armature");
	ta.setParameter("primaryShift", "0 0 " + heliostatZ);
	var tt = t.getPart("target");
	tt.setParameter("aimingPoint", aiming);

	n = n.createNode("primary");
	n = n.createNode("secondary");
	n = n.createNode("facet");

	var s = n.createShape();

	var q = s.insertSurface("Parabolic");
	q.setParameter("fX", focus);
	q.setParameter("fY", focus);

	var p = s.insertProfile("Box");
	p.setParameter("uSize", heliostatW);
	p.setParameter("vSize", heliostatH);

	var m = s.insertMaterial("Specular");
	m.setParameter("slope", "0.002");
	
	var g = s.getPart("material");
	g.setParameter("ambientColor", "0.65 0.72 0.79");
	g.setParameter("diffuseColor", "0.05 0.05 0.05");
	g.setParameter("specularColor", "0.3 0.25 0.2");
	g.setParameter("shininess", "0.5");
}

function makeTower(parent)
{
	var nodeTower = parent.createNode("Tower");

	var n = nodeTower.createNode("Base");
	var baseH = receiverZ - receiverH/2.;
	n.setParameter("translation", "0 0 " + baseH/2.);
	n.setParameter("scale", "" + receiverR + " " + receiverR + " " + baseH);
	var s = n.createShape();
	var q = s.insertSurface("Cylinder");
	var g = s.getPart("material");
	g.setParameter("ambientColor", "0.5 0.5 0.5");
	g.setParameter("diffuseColor", "0.5 0.5 0.5");

	n = nodeTower.createNode("Receiver");
	n.setParameter("translation", "0 0 " + receiverZ);
	n.setParameter("scale", "" + receiverR + " " + receiverR + " " + receiverH);
	s = n.createShape();
	q = s.insertSurface("Cylinder");
	g = s.getPart("material");
	g.setParameter("emissiveColor", "1 1 1");

	n = nodeTower.createNode("Cap");
	n.setParameter("translation", "0 0 " + (receiverZ + receiverH/2.));
	s = n.createShape();
	q = s.insertSurface("Planar");
	var p = s.insertProfile("Circular");
	p.setParameter("rMax", receiverR);
	g = s.getPart("material");
	g.setParameter("ambientColor", "0.5 0.5 0.5");
	g.setParameter("diffuseColor", "0.2 0.2 0.2");
}

// radial distance between heliostats (from a ring with radius rPrev)
function radialStep(rPrev)
{
	var alpha = Math.atan((receiverZ - heliostatZ)/(rPrev - receiverR)); // target elevation
	var alphaS = 90.*degree - Math.abs(latitude) - declination; // sun elevation (lowest at noon)
	var beta = (alpha + alphaS)/2.; // normal elevation
	var dR = heliostatH*Math.cos(alpha - beta)/Math.sin(alpha); // nonblocking distance (sines law)
	if (dR < dRMin) dR = dRMin;
	return dR;
}

// azimuthal distance between heliostats (in a ring with radius r)
function azimuthStep(r)
{
	var delta = Math.asin(azDistance*heliostatD/2/r); 
	var c = Math.floor(Math.PI/delta); // fit integer number into 360 degrees
	return 2*Math.PI/c;
}

// minimal radial separation between heliostats with the same azimuth
var dRMin = 1. - Math.pow(azDistance/2., 2);
if (dRMin < 0.) dRMin = 0.;
dRMin = 2.*Math.sqrt(dRMin);
if (dRMin < 1) dRMin = 1;
dRMin *= heliostatD;

// close packing (hexagonal grid)
var dRClose = 2*heliostatD*Math.sin(60*degree); 

var heliostatsPlaced;

function makeField(parent)
{
	var nodeHeliostats = parent.createNode("Heliostats");
	heliostatsPlaced = 0;
	var rho = rhoMin;	
	
	var phiStep = azimuthStep(rho);
	var phi0 = 0.;
	for (var row = 1; heliostatsPlaced < heliostats; row++) {
			var nodeRow = nodeHeliostats.createNode("Row_" + row);

			// close packing
			if (radialStep(rho) < dRClose) {
				// todo
			}		
	
			// fill row
			for (var phi = phi0; phi < phi0 + 2.*Math.PI - phiStep/2.; phi += phiStep)
			{
				heliostatsPlaced++;
				name = "H_" + heliostatsPlaced;

				x = rho*Math.sin(phi);
				y = rho*Math.cos(phi);
				z = 0.; 
				var position = "" + x + " " + y + " " + z;
				
				xA = x/rho*receiverR;
				yA = y/rho*receiverR;
				zA = receiverZ;
				aiming = "" + xA + " " + yA + " " + zA;
				focus = Math.sqrt((xA - x)*(xA - x) + (yA - y)*(yA - y) + (zA - z)*(zA - z));
				makeHeliostat(nodeRow, name, position, aiming, focus);			
			}
	
			// prepare next row
			var rhoNew = rho + radialStep(rho)/2.;
			var phiStepNew = azimuthStep(rhoNew);
			if (phiStep/phiStepNew > azReset) { // new zone
				// phiStep = phiStepNew;
				rhoNew = rho + radialStep(rho);
				phiStep = azimuthStep(rhoNew);
			}
			rho = rhoNew;

			if (phi0 == 0.)
				phi0 = phiStep/2;
			else
				phi0 = 0.;	
	}
}

// make scene
var nodeRoot = new NodeObject;
nodeRoot.setName("Script");
makeTower(nodeRoot);
makeField(nodeRoot);

tn.Clear();
tn.InsertScene(nodeRoot);

// set sun, camera and grid
var scene = tn.getScene();

var sp = scene.getPart("world.sun.position");
sp.setParameter("azimuth", 180);
sp.setParameter("elevation", 60);

var cm = scene.getPart("world.camera");
cm.setParameter("position", "-142.065 -212.839 159.843");
cm.setParameter("rotation", "33.5 -31.5");

var tg = scene.getPart("world.terrain.grid");
tg.setParameter("steps", "10 10 1");
tg.setParameter("min", "-100 -100 0");
tg.setParameter("max", "100 100 0");


// simulation
var w = tn.FindInterception("//Node/Script/Tower/Receiver/Shape", rays);
var wMax = heliostatsPlaced*heliostatW*heliostatH*1000; // number*width*height*DNI
var eta = w/wMax;

var dataOut = new DataObject;
var line = "" + receiverH + "," + eta;
print(line);
dataOut.addRow(line);
dataOut.write("out.csv");